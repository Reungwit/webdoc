from django.shortcuts import render
from django.http import FileResponse
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.utils import timezone

import json
from io import BytesIO

from backend.models import DocChapter1  # ‚Üê ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô models.py
from man_doc.doc_chapter1 import doc_chapter1  # ‚Üê ‡∏ï‡∏±‡∏ß generator .docx ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1


def _safe_parse_list(raw_text, fallback):
    """
    raw_text: string JSON ‡∏à‡∏≤‡∏Å <input type="hidden" name="chapter1_json">
    fallback: list (‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å DB ‡πÅ‡∏•‡πâ‡∏ß parse ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
    return: list ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    """
    try:
        data = json.loads(raw_text or '[]')
        if isinstance(data, list):
            return data
    except json.JSONDecodeError:
        pass
    return fallback or []


@login_required
def chapter_1_view(request):
    """
    View ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö dynamic)
    ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á doc_chapter_1 ‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• DocChapter1
    workflow ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5: save / get_data / generate_docx
    """
    user = request.user

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    row = DocChapter1.objects.filter(user=user).order_by('-updated_at').first()

    # intro_th ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏ó‡∏ô‡∏≥ (‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1)
    db_intro = (row.intro_th if row else '') or ''

    # sections_json ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô LONGTEXT (string JSON) ‡πÉ‡∏ô DB
    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ template
    db_sections_list = []
    if row and row.sections_json:
        try:
            tmp = json.loads(row.sections_json)
            if isinstance(tmp, list):
                db_sections_list = tmp
        except Exception:
            db_sections_list = []

    if request.method == 'POST':
        action = (request.POST.get('action') or '').strip()

        intro_body = (request.POST.get('intro_body') or '').strip()
        raw_json   = request.POST.get('chapter1_json', '')

        sections_from_form = _safe_parse_list(raw_json, db_sections_list)

        # -------- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• --------
        if action == 'save':
            sections_str = json.dumps(sections_from_form, ensure_ascii=False)

            DocChapter1.objects.update_or_create(
                user=user,
                defaults={
                    'intro_th': intro_body,
                    'sections_json': sections_str,
                    'updated_at': timezone.now(),
                }
            )

            messages.success(request, 'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return render(request, 'chapter_1.html', {
                'initial': {
                    'intro_body': '',
                    'chapter1_json': []
                }
            })

        # -------- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á --------
        elif action == 'get_data':
            messages.info(request, 'üîÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return render(request, 'chapter_1.html', {
                'initial': {
                    'intro_body': db_intro,
                    'chapter1_json': db_sections_list
                }
            })

        # -------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ docx --------
        elif action == 'generate_docx':
            # ‡∏ñ‡πâ‡∏≤ intro_body ‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° ‡πÄ‡∏£‡∏≤ fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô DB
            if not intro_body:
                intro_body = db_intro

            # sections ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ doc builder
            sections_for_doc = sections_from_form if sections_from_form else db_sections_list

            # NOTE: ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö doc_chapter1() ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö (intro_body, sections_for_doc)
            # ‡πÅ‡∏•‡∏∞ return ‡πÄ‡∏õ‡πá‡∏ô python-docx Document()
            doc = doc_chapter1(intro_body, sections_for_doc)

            buf = BytesIO()
            doc.save(buf)
            buf.seek(0)
            return FileResponse(
                buf,
                as_attachment=True,
                filename='chapter1.docx',
                content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            )

        # action ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
        messages.info(request, '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ')
        return render(request, 'chapter_1.html', {
            'initial': {
                'intro_body': '',
                'chapter1_json': []
            }
        })

    # -------- GET ‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏¢ ‡πÜ) --------
    return render(request, 'chapter_1.html', {
        'initial': {
            # ‡πÉ‡∏™‡πà intro_body ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß
            'intro_body': (db_intro if (db_intro or db_sections_list) else ''),
            # sections ‡∏ó‡∏µ‡πà parse ‡πÄ‡∏õ‡πá‡∏ô list ‡πÅ‡∏•‡πâ‡∏ß (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏¢ template ‡∏à‡∏∞ fallback defaultSections)
            'chapter1_json': db_sections_list,
        }
    })
