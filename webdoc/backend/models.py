from django.contrib.auth.models import AbstractUser
from django.db import models
from django.conf import settings
from django.contrib.auth.decorators import login_required
from django.views.decorators.csrf import csrf_exempt
from django.db.models import JSONField


from django.contrib.auth.models import AbstractUser
from django.db import models
from django.conf import settings


class CustomUser(AbstractUser):
    user_id = models.AutoField(primary_key=True)
    email = models.EmailField(unique=True)
    full_name = models.CharField(max_length=150)

    USERNAME_FIELD = 'email'  
    REQUIRED_FIELDS = ['username', 'full_name']

    def __str__(self):
        return self.email


class SpProject(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        db_column='user_id',
        to_field='user_id'
    )
    name_pro_th = models.CharField(max_length=255)
    name_pro_en = models.CharField(max_length=255)
    case_stu = models.CharField(max_length=100)
    term = models.CharField(max_length=50)
    school_y = models.CharField(max_length=10)
    adviser = models.CharField(max_length=255)
    co_advisor = models.CharField(max_length=255, blank=True, null=True)
    strategic = models.TextField()
    plan = models.TextField()
    key_result = models.TextField()
    bg_and_sig_para1 = models.TextField()
    bg_and_sig_para2 = models.TextField()
    bg_and_sig_para3 = models.TextField()
    purpose_1 = models.CharField(max_length=255)
    purpose_2 = models.CharField(max_length=255)
    purpose_3 = models.CharField(max_length=255)
    scope_json = JSONField(blank=True, null=True)
    
    class Meta:
        db_table = 'sp_project'

class SpProjectAuthor(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100)
    userid = models.IntegerField()  # FK ‡πÑ‡∏õ backend_customuser.user_id (‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à map ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
    
    # ‚úÖ FK ‡πÑ‡∏õ sp_project.id
    project = models.ForeignKey(
        'SpProject',
        on_delete=models.CASCADE,
        db_column='sp_id',         # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô DB
        to_field='id'              # FK ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á SpProject.id
    )

    class Meta:
        db_table = 'sp_project_author'
        managed = False  # ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏≠‡∏á‡πÉ‡∏ô MySQL
        
# ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà
class DocCover(models.Model):
    cover_id = models.AutoField(primary_key=True)
    project_name_th = models.CharField(max_length=500, null=True)
    project_name_en = models.CharField(max_length=500, null=True)
    author1_name_th = models.CharField(max_length=255, null=True)
    author2_name_th = models.CharField(max_length=255, null=True)
    author1_name_en = models.CharField(max_length=255, null=True)
    author2_name_en = models.CharField(max_length=255, null=True)
    academic_year = models.CharField(max_length=10, null=True)
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        db_column='user_id',
        to_field='user_id'
    )

    class Meta:
        db_table = 'doc_cover'
        managed = False  # ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏≠‡∏á‡πÉ‡∏ô phpMyAdmin



#‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏±‡∏î‡∏¢‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏ï‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
class Abstract(models.Model):
    abstract_id = models.AutoField(primary_key=True)
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        db_column='user_id',
        to_field='user_id'
    )
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    project_name_th = models.TextField(null=True, blank=True)
    project_name_en = models.TextField(null=True, blank=True)
    major_th = models.TextField(null=True, blank=True)
    major_en = models.TextField(null=True, blank=True)
    advisor_th = models.CharField(max_length=255, null=True, blank=True)
    advisor_en = models.CharField(max_length=255, null=True, blank=True)
    coadvisor_th = models.CharField(max_length=255, null=True, blank=True)
    coadvisor_en = models.CharField(max_length=255, null=True, blank=True)
    academic_year_th = models.IntegerField(null=True, blank=True)
    academic_year_en = models.IntegerField(null=True, blank=True)

    # üîπ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    total_pages = models.IntegerField(null=True, blank=True)

    # ‡∏ö‡∏ó‡∏Ñ‡∏±‡∏î‡∏¢‡πà‡∏≠
    abstract_th_para1 = models.TextField(null=True, blank=True)
    abstract_th_para2 = models.TextField(null=True, blank=True)
    abstract_en_para1 = models.TextField(null=True, blank=True)
    abstract_en_para2 = models.TextField(null=True, blank=True)
    keyword_th = models.TextField(null=True, blank=True)
    keyword_en = models.TextField(null=True, blank=True)

    # ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥
    author1_th = models.CharField(max_length=255, null=True, blank=True)
    author1_en = models.CharField(max_length=255, null=True, blank=True)
    author2_th = models.CharField(max_length=255, null=True, blank=True)
    author2_en = models.CharField(max_length=255, null=True, blank=True)

    # ‡∏Å‡∏¥‡∏ï‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
    acknow_para1 = models.TextField(null=True, blank=True)
    acknow_para2 = models.TextField(null=True, blank=True)
    acknow_name1 = models.CharField(max_length=255, null=True, blank=True)
    acknow_name2 = models.CharField(max_length=255, null=True, blank=True)

    class Meta:
        managed = False
        db_table = 'abstract'

# ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ô‡∏¥‡∏û‡∏ô‡∏ò‡πå (‡∏≠‡∏¥‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á certificate ‡πÄ‡∏î‡∏¥‡∏°)
class Certificate(models.Model):
    # ‡∏Ñ‡∏µ‡∏¢‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
    id = models.AutoField(primary_key=True)  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå id

    # FK ‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend_customuser.user_id
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,         # ‡∏≠‡∏¥‡∏á CustomUser
        on_delete=models.CASCADE,         # ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ -> ‡∏•‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°
        db_column='user_id',              # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á certificate
        to_field='user_id',               # ‡∏≠‡∏¥‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå user_id ‡∏Ç‡∏≠‡∏á CustomUser
        related_name='certificates',      # ‡∏ä‡∏∑‡πà‡∏≠ reverse relation
    )

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
    topic = models.CharField(max_length=255)                         # ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏•‡πà‡∏°)
    dean = models.CharField(max_length=255)                          # ‡∏Ñ‡∏ì‡∏ö‡∏î‡∏µ
    author1 = models.CharField(max_length=255)                       # ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1
    author2 = models.CharField(max_length=255, null=True, blank=True) # ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2 (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)

    # ‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö
    chairman = models.CharField(max_length=255)                       # ‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£
    committee1 = models.CharField(max_length=255)                     # ‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1
    committee2 = models.CharField(max_length=255, null=True, blank=True)  # ‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2 (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)

    # ‡πÄ‡∏ß‡∏•‡∏≤ (‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á default ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ Django ‡πÑ‡∏°‡πà‡πÑ‡∏õ‡πÅ‡∏ï‡∏∞)
    created_at = models.DateTimeField(null=True, blank=True)
    updated_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        db_table = 'certificate'   # ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
        managed = False            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Django migrate

    def __str__(self):
        return f'Certificate({self.user_id} : {self.topic})'

class Chapter1(models.Model):
   
    chapter_id = models.AutoField(
        primary_key=True,
        help_text="PK: ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)"
    )

    # 1.1 ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (3 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤)
    sec11_p1 = models.TextField(null=True, blank=True,
                                help_text="1.1 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ 1")
    sec11_p2 = models.TextField(null=True, blank=True,
                                help_text="1.1 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ 2")
    sec11_p3 = models.TextField(null=True, blank=True,
                                help_text="1.1 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ 3")

    # 1.2 ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏Ç‡πâ‡∏≠)
    purpose_count = models.PositiveSmallIntegerField(default=0,
                                help_text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å (0-3)")
    purpose_1 = models.CharField(max_length=500, null=True, blank=True,
                                 help_text="‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 1 (1.2.1)")
    purpose_2 = models.CharField(max_length=500, null=True, blank=True,
                                 help_text="‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 2 (1.2.2)")
    purpose_3 = models.CharField(max_length=500, null=True, blank=True,
                                 help_text="‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 3 (1.2.3)")

    # 1.3 ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢
    hypo_paragraph = models.TextField(null=True, blank=True,
                                      help_text="1.3 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤")
    hypo_items_json = models.JSONField(null=True, blank=True,
                                       help_text="1.3.x ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢ ")

    # 1.4 ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢ (‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å/‡∏¢‡πà‡∏≠‡∏¢)
    scope_json = models.JSONField(null=True, blank=True,
                                  help_text='1.4 ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï (JSON array ‡∏Ç‡∏≠‡∏á object: [{"main":"...","subs":["..."]}])')

    # 1.5 ‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    para_premise = models.JSONField(null=True, blank=True,
                                    help_text="1.5 ‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î) - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    premise_json = models.JSONField(null=True, blank=True,
                                    help_text='1.5 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å/‡∏¢‡πà‡∏≠‡∏¢ (JSON array ‡∏Ç‡∏≠‡∏á object ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö scope_json)')

    # 1.6 ‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡πÑ‡∏°‡πà‡∏°‡∏µ paragraph)
    def_items_json = models.JSONField(null=True, blank=True,
                                      help_text="1.6.x ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏®‡∏±‡∏û‡∏ó‡πå (JSON array ‡∏Ç‡∏≠‡∏á string)")

    # 1.7 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö (‡πÑ‡∏°‡πà‡∏°‡∏µ paragraph)
    benefit_items_json = models.JSONField(null=True, blank=True,
                                          help_text="1.7.x ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö (JSON array ‡∏Ç‡∏≠‡∏á string)")

    # ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á (‡πÉ‡∏ô DB ‡∏ï‡∏±‡πâ‡∏á DEFAULT CURRENT_TIMESTAMP ‡πÑ‡∏ß‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    created_at = models.DateTimeField(auto_now_add=True,
                                      help_text="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        db_column='user_id',
        to_field='user_id'
    )

    class Meta:
        managed = False          # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Django ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        db_table = 'chapter_1'
        
#‡∏ö‡∏£‡∏£‡∏ì‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
class RefWebsite(models.Model):
    id = models.BigAutoField(primary_key=True, help_text="PK: ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå")
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        db_column='user_id',
        to_field='user_id',
        help_text="FK: ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
    )
    number = models.IntegerField(null=True, blank=True, help_text="‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á")
    authors_th_json = models.JSONField(help_text="‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (JSON array)")
    authors_en_json = models.JSONField(help_text="‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (JSON array)")
    title_th = models.CharField(max_length=500)
    title_en = models.CharField(max_length=500)
    site_name_th = models.CharField(max_length=255, null=True, blank=True)
    site_name_en = models.CharField(max_length=255, null=True, blank=True)
    year = models.SmallIntegerField(null=True, blank=True)
    month = models.SmallIntegerField(null=True, blank=True)
    day = models.SmallIntegerField(null=True, blank=True)
    url = models.CharField(max_length=1000)
    accessed_date = models.DateField(null=True, blank=True)
    notes = models.TextField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'ref_website'
        managed = False

#‡∏ö‡∏£‡∏£‡∏ì‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
class RefBook(models.Model):
    id = models.BigAutoField(primary_key=True, help_text="PK: ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        db_column='user_id',
        to_field='user_id',
        help_text="FK: ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
    )
    number = models.IntegerField(null=True, blank=True, help_text="‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á")
    authors_th_json = models.JSONField(help_text="‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (JSON array)")
    authors_en_json = models.JSONField(help_text="‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (JSON array)")
    title_th = models.CharField(max_length=500)
    title_en = models.CharField(max_length=500)
    edition_th = models.CharField(max_length=50, null=True, blank=True)
    edition_en = models.CharField(max_length=50, null=True, blank=True)
    publisher_place_th = models.CharField(max_length=255, null=True, blank=True)
    publisher_place_en = models.CharField(max_length=255, null=True, blank=True)
    publisher_th = models.CharField(max_length=255, null=True, blank=True)
    publisher_en = models.CharField(max_length=255, null=True, blank=True)
    year = models.SmallIntegerField(null=True, blank=True)
    doi = models.CharField(max_length=255, null=True, blank=True)
    url = models.CharField(max_length=1000, null=True, blank=True)
    notes = models.TextField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'ref_book'
        managed = False



#     Chapter 5 
# backend/models.py
class Chapter5(models.Model):
    """
    ‡πÅ‡∏°‡∏õ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (managed=False) ‡∏ï‡∏≤‡∏° DDL:
    CREATE TABLE chapter5 (
        doc_id BIGINT AUTO_INCREMENT PRIMARY KEY,
        user_id BIGINT NOT NULL,
        intro_th LONGTEXT NULL,
        sections_json JSON NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES backend_customuser(id) ON DELETE CASCADE
    );
    """
    doc_id = models.BigAutoField(primary_key=True)
    # ‡∏≠‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö auth ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á ‡∏ú‡πà‡∏≤‡∏ô AUTH_USER_MODEL
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        db_column='user_id',
        related_name='chapter5_docs',
    )
    intro_th = models.TextField(null=True, blank=True)
    sections_json = models.JSONField(default=list)  # ‡πÄ‡∏Å‡πá‡∏ö list[{title, body, mains:[{text, subs[]}], section_order, main_order}]
    created_at = models.DateTimeField(auto_now_add=False, null=True, blank=True)   # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å DB
    updated_at = models.DateTimeField(auto_now=True)                                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Django ‡πÉ‡∏´‡πâ sync ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô obj

    class Meta:
        managed = False              # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Django ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        db_table = 'chapter5'

    def __str__(self):
        return f'Chapter5(doc_id={self.doc_id}, user_id={self.user_id})'

